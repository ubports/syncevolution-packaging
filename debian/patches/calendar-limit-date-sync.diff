From feb8997db6089979e8fce6f2b0c7032918fe7dcb Mon Sep 17 00:00:00 2001
From: Renato Araujo Oliveira Filho <renato.filho@canonical.com>
Date: Wed, 1 Apr 2015 12:06:48 -0300
Subject: [PATCH 1/3] Implement a way to configure the initial date used for
 calendar sync

Added SyncInterval property to allow configure the calendar sync interval.
---
 src/backends/webdav/CalDAVSource.cpp | 77 +++++++++++++++++++++++++++++++-----
 src/syncevo/SyncConfig.cpp           | 31 ++++++++++++++-
 src/syncevo/SyncConfig.h             |  5 +++
 3 files changed, 102 insertions(+), 11 deletions(-)

diff --git a/src/backends/webdav/CalDAVSource.cpp b/src/backends/webdav/CalDAVSource.cpp
index fa16935..80b672b 100644
--- a/src/backends/webdav/CalDAVSource.cpp
+++ b/src/backends/webdav/CalDAVSource.cpp
@@ -41,6 +41,35 @@ static void removeSyncEvolutionExdateDetached(icalcomponent *parent)
     }
 }
 
+static void eventInIntervalForeach(icalcomponent *comp, 
+                                        struct icaltime_span *span, 
+                                        void *data)
+{
+   // set the value to say that events has recurrence
+    *((bool*)data) = true;
+}
+
+static bool eventInInterval(icalcomponent *comp, const std::string &startDate)
+{
+    if (startDate.empty()) {
+        return true;
+    }
+    if (!comp) {
+        return false;
+    }
+    
+    bool hasRecurrence = false;
+    const icaltimetype dtStart = icaltime_from_string(startDate.c_str());
+    const icaltimetype dtEnd = icaltime_from_timet(INT_MAX, false);
+
+    icalcomponent_foreach_recurrence(comp, 
+                                     dtStart,
+                                     dtEnd,
+                                     eventInIntervalForeach,
+                                     &hasRecurrence);
+    return hasRecurrence;
+}
+
 CalDAVSource::CalDAVSource(const SyncSourceParams &params,
                            const boost::shared_ptr<Neon::Settings> &settings) :
     WebDAVSource(params, settings)
@@ -60,7 +89,7 @@ void CalDAVSource::listAllSubItems(SubRevisionMap_t &revisions)
 {
     revisions.clear();
 
-    const std::string query =
+    std::string query =
         "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
         "<C:calendar-query xmlns:D=\"DAV:\"\n"
         "xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n"
@@ -96,8 +125,13 @@ void CalDAVSource::listAllSubItems(SubRevisionMap_t &revisions)
         // filter expected by Yahoo! Calendar
         "<C:filter>\n"
         "<C:comp-filter name=\"VCALENDAR\">\n"
-        "<C:comp-filter name=\"VEVENT\">\n"
-        "</C:comp-filter>\n"
+        "<C:comp-filter name=\"VEVENT\">\n";
+
+    std::string startDateFilter = getStartDate();
+    if (!startDateFilter.empty())
+        query +=  "<C:time-range start=\"" + startDateFilter + "\"/>\n";
+
+    query += "</C:comp-filter>\n"
         "</C:comp-filter>\n"
         "</C:filter>\n"
         "</C:calendar-query>\n";
@@ -135,7 +169,7 @@ void CalDAVSource::addResource(StringMap &items,
 void CalDAVSource::updateAllSubItems(SubRevisionMap_t &revisions)
 {
     // list items to identify new, updated and removed ones
-    const std::string query =
+    std::string query =
         "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
         "<C:calendar-query xmlns:D=\"DAV:\"\n"
         "xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n"
@@ -145,7 +179,13 @@ void CalDAVSource::updateAllSubItems(SubRevisionMap_t &revisions)
         // filter expected by Yahoo! Calendar
         "<C:filter>\n"
         "<C:comp-filter name=\"VCALENDAR\">\n"
-        "<C:comp-filter name=\"VEVENT\">\n"
+        "<C:comp-filter name=\"VEVENT\">\n";
+
+    std::string startDateFilter = getStartDate();
+    if (!startDateFilter.empty())
+        query +=  "<C:time-range start=\"" + startDateFilter + "\"/>\n";
+
+    query +=
         "</C:comp-filter>\n"
         "</C:comp-filter>\n"
         "</C:filter>\n"
@@ -329,6 +369,7 @@ int CalDAVSource::appendItem(SubRevisionMap_t &revisions,
     for (icalcomponent *comp = icalcomponent_get_first_component(calendar, ICAL_VEVENT_COMPONENT);
          comp;
          comp = icalcomponent_get_next_component(calendar, ICAL_VEVENT_COMPONENT)) {
+
         std::string subid = Event::getSubID(comp);
         uid = Event::getUID(comp);
         long sequence = Event::getSequence(comp);
@@ -411,6 +452,11 @@ SubSyncSource::SubItemResult CalDAVSource::insertSubItem(const std::string &luid
     newEvent->m_calendar.set(icalcomponent_new_from_string((char *)item.c_str()), // hack for old libical
                              "parsing iCalendar 2.0");
 
+    if (!eventInInterval(newEvent->m_calendar, getStartDate())) {
+        SE_LOG_INFO(getDisplayName(), "CalDAV peer rejected updated because item is outside the sync interval");
+        return subres;
+    }
+
     // Google Calendar adds a default alarm each time a VEVENT is
     // added anew. Avoid that by adding a dummy VALARM with
     // ACTION=NONE. Must include a fake TRIGGER. This is what iOS
@@ -1122,7 +1168,7 @@ CalDAVSource::Event &CalDAVSource::loadItem(Event &event)
                 report.run();
 #else
                 std::string query =
-                    StringPrintf("<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
+                    "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
                                  "<C:calendar-query xmlns:D=\"DAV:\"\n"
                                  "xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n"
                                  "<D:prop>\n"
@@ -1132,8 +1178,13 @@ CalDAVSource::Event &CalDAVSource::loadItem(Event &event)
                                  // filter expected by Yahoo! Calendar
                                  "<C:filter>\n"
                                  "<C:comp-filter name=\"VCALENDAR\">\n"
-                                 "<C:comp-filter name=\"VEVENT\">\n"
-                                 "<C:prop-filter name=\"UID\">\n"
+                                 "<C:comp-filter name=\"VEVENT\">\n";
+
+                std::string startDateFilter = getStartDate();
+                if (!startDateFilter.empty())
+                    query +=  "<C:time-range start=\"" + startDateFilter + "\"/>\n";
+
+                query += StringPrintf("<C:prop-filter name=\"UID\">\n"
                                  "<C:text-match collation=\"i;octet\"><![CDATA[%s]]></C:text-match>\n"
                                  "</C:prop-filter>\n"
                                  "</C:comp-filter>\n"
@@ -1351,7 +1402,7 @@ void CalDAVSource::backupData(const SyncSource::Operations::ConstBackupInfo &old
     cache.init(oldBackup, newBackup, false);
 
     // stream directly from REPORT with full data into backup
-    const std::string query =
+    std::string query =
         "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n"
         "<C:calendar-query xmlns:D=\"DAV:\"\n"
         "xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n"
@@ -1362,7 +1413,13 @@ void CalDAVSource::backupData(const SyncSource::Operations::ConstBackupInfo &old
         // filter expected by Yahoo! Calendar
         "<C:filter>\n"
         "<C:comp-filter name=\"VCALENDAR\">\n"
-        "<C:comp-filter name=\"VEVENT\">\n"
+        "<C:comp-filter name=\"VEVENT\">\n";
+
+    std::string startDateFilter = getStartDate();
+    if (!startDateFilter.empty())
+        query +=  "<C:time-range start=\"" + startDateFilter + "\"/>\n";
+
+    query +=
         "</C:comp-filter>\n"
         "</C:comp-filter>\n"
         "</C:filter>\n"
diff --git a/src/syncevo/SyncConfig.cpp b/src/syncevo/SyncConfig.cpp
index e63a9d7..4f49d20 100644
--- a/src/syncevo/SyncConfig.cpp
+++ b/src/syncevo/SyncConfig.cpp
@@ -2847,6 +2847,12 @@ static ConfigProperty sourcePropDatabaseID(Aliases("database") + "evolutionsourc
                                            "data datastore is marked with <default> at the end\n"
                                            "of the line, if there is a default.\n");
 
+static ConfigProperty sourcePropCalendarSyncInterval(Aliases("syncInterval"),
+                                           "Defines the number of days before the current date that should be use as start date for the calendar sync.\n"
+                                           "This can be set do limit the number of events imported from the source calendar.\n"
+                                           "\n"
+                                           "Leave it empty if you want to import all events.\n");
+
 static StringConfigProperty sourcePropDatabaseFormat("databaseFormat",
                                                      "Defines the data format to be used by the backend for its\n"
                                                      "own storage. Typically backends only support one format\n"
@@ -2941,6 +2947,7 @@ public:
         registry.push_back(&sourcePropSyncFormat);
         registry.push_back(&sourcePropForceSyncFormat);
         registry.push_back(&sourcePropDatabaseID);
+        registry.push_back(&sourcePropCalendarSyncInterval);
         registry.push_back(&sourcePropDatabaseFormat);
         registry.push_back(&sourcePropUser);
         registry.push_back(&sourcePropPassword);
@@ -2966,6 +2973,7 @@ public:
         // peer independent source properties
         sourcePropBackend.setSharing(ConfigProperty::SOURCE_SET_SHARING);
         sourcePropDatabaseID.setSharing(ConfigProperty::SOURCE_SET_SHARING);
+        sourcePropCalendarSyncInterval.setSharing(ConfigProperty::SOURCE_SET_SHARING);
         sourcePropDatabaseFormat.setSharing(ConfigProperty::SOURCE_SET_SHARING);
         sourcePropUser.setSharing(ConfigProperty::SOURCE_SET_SHARING);
         sourcePropPassword.setSharing(ConfigProperty::SOURCE_SET_SHARING);
@@ -3036,12 +3044,33 @@ SyncSourceNodes::getNode(const ConfigProperty &prop) const
 
 InitStateString SyncSourceConfig::getDatabaseID() const { return sourcePropDatabaseID.getProperty(*getNode(sourcePropDatabaseID)); }
 void SyncSourceConfig::setDatabaseID(const string &value, bool temporarily) { sourcePropDatabaseID.setProperty(*getNode(sourcePropDatabaseID), value, temporarily); }
+InitStateString SyncSourceConfig::getSyncInterval() const { return sourcePropCalendarSyncInterval.getProperty(*getNode(sourcePropCalendarSyncInterval)); }
+void SyncSourceConfig::setSyncInterval(const string &value, bool temporarily) {
+    sourcePropCalendarSyncInterval.setProperty(*getNode(sourcePropCalendarSyncInterval), value, temporarily);
+}
+
+string SyncSourceConfig::getStartDate() const
+{
+    InitStateString intevalInDays = getSyncInterval();
+    if (intevalInDays.empty()) {
+        return std::string("");
+    }
+
+    // 86400 number of secs in a day
+    int secs = atoi(intevalInDays.c_str()) * 86400;
+    struct tm  tm;
+    time_t fullTime = time(0);
+    fullTime -= secs;
+    gmtime_r(&fullTime,  &tm);
+    
+    return StringPrintf("%d%02d%02dT000000Z", tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday);
+}
+
 UserIdentity SyncSourceConfig::getUser() const {
     InitStateString user = sourcePropUser.getProperty(*getNode(sourcePropUser));
     UserIdentity id(UserIdentity::fromString(user));
     return id;
 }
-
 void SyncSourceConfig::setUsername(const string &value, bool temporarily) { sourcePropUser.setProperty(*getNode(sourcePropUser), value, temporarily); }
 InitStateString SyncSourceConfig::getPassword() const {
     return sourcePropPassword.getProperty(*getNode(sourcePropPassword));
diff --git a/src/syncevo/SyncConfig.h b/src/syncevo/SyncConfig.h
index c692362..d5a7f31 100644
--- a/src/syncevo/SyncConfig.h
+++ b/src/syncevo/SyncConfig.h
@@ -1920,6 +1920,11 @@ class SyncSourceConfig {
     virtual InitStateString getDatabaseID() const;
     virtual void setDatabaseID(const std::string &value, bool temporarily = false);
 
+    /** selects the start date for calendar sync */
+    std::string getStartDate() const;
+    virtual InitStateString getSyncInterval() const;
+    virtual void setSyncInterval(const std::string &value, bool temporarily = false);
+
     /**
      * internal property: unique integer ID for the source, needed by Synthesis XML <dbtypeid>,
      * zero if unset
-- 
2.1.0

